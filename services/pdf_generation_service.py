"""
PDF Generation Service for Enhanced Content

This service converts enhanced content (markdown, HTML, or text) into professional PDF format
for storage in GitHub repository. Supports both sympathetic and professional writing styles
generated by Gilbert's AI agents.
"""

import os
import base64
import markdown2
from datetime import datetime
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration
from typing import Dict, List, Optional
import requests


class PDFGenerationService:
    """Service for converting enhanced content to PDF format"""
    
    def __init__(self):
        self.font_config = FontConfiguration()
        self.github_token = os.environ.get('GITHUB_TOKEN')
        self.github_username = os.environ.get('GITHUB_USERNAME')
        self.repo_name = 'content-generation-ai-agents'
        
        # Professional CSS styles for PDF generation
        self.css_styles = """
        @page {
            size: A4;
            margin: 2cm;
            @top-center { content: string(chapter); }
            @bottom-center { content: counter(page); }
        }
        
        body {
            font-family: 'Georgia', 'Times New Roman', serif;
            font-size: 11pt;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
        }
        
        h1 {
            font-size: 24pt;
            font-weight: bold;
            color: #1a365d;
            margin: 30pt 0 20pt 0;
            page-break-before: always;
            string-set: chapter content();
        }
        
        h2 {
            font-size: 18pt;
            font-weight: bold;
            color: #2d3748;
            margin: 25pt 0 15pt 0;
            border-bottom: 2pt solid #e2e8f0;
            padding-bottom: 5pt;
        }
        
        h3 {
            font-size: 14pt;
            font-weight: bold;
            color: #4a5568;
            margin: 20pt 0 12pt 0;
        }
        
        h4, h5, h6 {
            font-size: 12pt;
            font-weight: bold;
            color: #718096;
            margin: 15pt 0 10pt 0;
        }
        
        p {
            margin: 0 0 12pt 0;
            text-align: justify;
        }
        
        .title-page {
            text-align: center;
            page-break-after: always;
            margin-top: 100pt;
        }
        
        .title-page h1 {
            font-size: 36pt;
            color: #1a365d;
            margin: 50pt 0;
            page-break-before: avoid;
        }
        
        .title-page .subtitle {
            font-size: 18pt;
            color: #4a5568;
            margin: 20pt 0;
            font-style: italic;
        }
        
        .title-page .author {
            font-size: 14pt;
            color: #718096;
            margin: 30pt 0;
        }
        
        .title-page .date {
            font-size: 12pt;
            color: #a0aec0;
            margin: 20pt 0;
        }
        
        .table-of-contents {
            page-break-after: always;
        }
        
        .table-of-contents h2 {
            border-bottom: none;
            margin-bottom: 30pt;
        }
        
        .toc-entry {
            margin: 8pt 0;
            padding: 4pt 0;
            border-bottom: 1pt dotted #e2e8f0;
        }
        
        .toc-title {
            display: inline-block;
            width: 80%;
        }
        
        .toc-page {
            display: inline-block;
            width: 15%;
            text-align: right;
        }
        
        blockquote {
            margin: 20pt 40pt;
            padding: 15pt;
            background: #f7fafc;
            border-left: 4pt solid #3182ce;
            font-style: italic;
        }
        
        ul, ol {
            margin: 12pt 0;
            padding-left: 30pt;
        }
        
        li {
            margin: 6pt 0;
        }
        
        strong, b {
            font-weight: bold;
            color: #2d3748;
        }
        
        em, i {
            font-style: italic;
        }
        
        .highlight {
            background: #fef5e7;
            padding: 2pt 4pt;
            border-radius: 2pt;
        }
        
        .chapter-intro {
            font-size: 12pt;
            color: #4a5568;
            margin: 20pt 0;
            padding: 15pt;
            background: #edf2f7;
            border-radius: 5pt;
        }
        
        .footnote {
            font-size: 9pt;
            color: #718096;
            margin-top: 20pt;
            border-top: 1pt solid #e2e8f0;
            padding-top: 10pt;
        }
        
        hr {
            border: none;
            border-top: 2pt solid #e2e8f0;
            margin: 30pt 0;
        }
        """
    
    def markdown_to_html(self, markdown_content: str, title: str = "", author: str = "Gilbert Cesarano") -> str:
        """Convert markdown content to HTML with professional styling"""
        
        # Convert markdown to HTML
        html_content = markdown2.markdown(
            markdown_content,
            extras=['fenced-code-blocks', 'tables', 'header-ids', 'toc']
        )
        
        # Create title page
        current_date = datetime.now().strftime("%B %Y")
        
        title_page = f"""
        <div class="title-page">
            <h1>{title}</h1>
            <div class="subtitle">Enhanced with Gilbert's Authentic Voice AI</div>
            <div class="author">By {author}</div>
            <div class="date">{current_date}</div>
        </div>
        """
        
        # Create complete HTML document
        full_html = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{title}</title>
            <style>{self.css_styles}</style>
        </head>
        <body>
            {title_page}
            {html_content}
        </body>
        </html>
        """
        
        return full_html
    
    def generate_pdf(self, content: str, filename: str, content_type: str = "markdown") -> bytes:
        """Generate PDF from content"""
        
        try:
            if content_type == "markdown":
                # Extract title from content
                lines = content.split('\n')
                title = "Enhanced Content"
                for line in lines:
                    if line.startswith('# '):
                        title = line[2:].strip()
                        break
                
                html_content = self.markdown_to_html(content, title)
            else:
                html_content = content
            
            # Generate PDF
            pdf_bytes = HTML(string=html_content).write_pdf(
                font_config=self.font_config
            )
            
            return pdf_bytes
            
        except Exception as e:
            print(f"Error generating PDF: {e}")
            return b""
    
    def upload_pdf_to_github(self, pdf_content: bytes, file_path: str, commit_message: str = None) -> bool:
        """Upload PDF content to GitHub repository"""
        
        if not commit_message:
            commit_message = f"Add enhanced PDF: {file_path}"
        
        try:
            # Encode PDF content to base64
            content_encoded = base64.b64encode(pdf_content).decode('utf-8')
            
            # GitHub API endpoint
            url = f'https://api.github.com/repos/{self.github_username}/{self.repo_name}/contents/{file_path}'
            
            headers = {
                'Authorization': f'token {self.github_token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            data = {
                'message': commit_message,
                'content': content_encoded
            }
            
            response = requests.put(url, headers=headers, json=data)
            
            if response.status_code == 201:
                print(f"✅ {file_path}")
                return True
            else:
                print(f"❌ {file_path}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"❌ Error uploading {file_path}: {str(e)}")
            return False
    
    def process_and_upload_ebook(self, enhanced_content: str, original_filename: str, 
                                agent_type: str = "enhanced") -> bool:
        """Process enhanced eBook content and upload as PDF"""
        
        # Generate filename for PDF
        base_name = original_filename.replace('.md', '').replace('_', '-')
        pdf_filename = f"enhanced_ebooks/{base_name}-{agent_type}-enhanced.pdf"
        
        # Generate PDF
        pdf_content = self.generate_pdf(enhanced_content, pdf_filename)
        
        if pdf_content:
            # Upload to GitHub
            commit_message = f"Add {agent_type} enhanced eBook: {base_name}"
            return self.upload_pdf_to_github(pdf_content, pdf_filename, commit_message)
        
        return False


def create_pdf_service() -> PDFGenerationService:
    """Factory function to create PDF generation service"""
    return PDFGenerationService()


if __name__ == "__main__":
    # Test PDF generation
    service = create_pdf_service()
    
    test_content = """
# Test Enhanced eBook
## Introduction
This is a test of the PDF generation service with Gilbert's enhanced authentic voice.

### Key Features
- Professional PDF formatting
- Enhanced with AI agent voice
- Automatic GitHub upload
- Professional styling

**Enhanced Content**: This content has been transformed using Gilbert's authentic voice AI agents to create more engaging and impactful business content.

*The system works seamlessly to deliver professional-quality documents.*
"""
    
    pdf_content = service.generate_pdf(test_content, "test-ebook.pdf")
    if pdf_content:
        print("✅ PDF generation test successful!")
        print(f"Generated PDF size: {len(pdf_content)} bytes")
    else:
        print("❌ PDF generation test failed")